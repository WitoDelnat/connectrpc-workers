// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file example/v1/example.proto (package example.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import {Message, proto3} from '@bufbuild/protobuf'

/**
 * @generated from message example.v1.HelloUnaryRequest
 */
export class HelloUnaryRequest extends Message<HelloUnaryRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = ''

  constructor(data?: PartialMessage<HelloUnaryRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'example.v1.HelloUnaryRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelloUnaryRequest {
    return new HelloUnaryRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelloUnaryRequest {
    return new HelloUnaryRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelloUnaryRequest {
    return new HelloUnaryRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: HelloUnaryRequest | PlainMessage<HelloUnaryRequest> | undefined,
    b: HelloUnaryRequest | PlainMessage<HelloUnaryRequest> | undefined,
  ): boolean {
    return proto3.util.equals(HelloUnaryRequest, a, b)
  }
}

/**
 * @generated from message example.v1.HelloUnaryResponse
 */
export class HelloUnaryResponse extends Message<HelloUnaryResponse> {
  /**
   * @generated from field: string greeting = 1;
   */
  greeting = ''

  constructor(data?: PartialMessage<HelloUnaryResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'example.v1.HelloUnaryResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'greeting', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelloUnaryResponse {
    return new HelloUnaryResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelloUnaryResponse {
    return new HelloUnaryResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelloUnaryResponse {
    return new HelloUnaryResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: HelloUnaryResponse | PlainMessage<HelloUnaryResponse> | undefined,
    b: HelloUnaryResponse | PlainMessage<HelloUnaryResponse> | undefined,
  ): boolean {
    return proto3.util.equals(HelloUnaryResponse, a, b)
  }
}

/**
 * @generated from message example.v1.HelloClientStreamRequest
 */
export class HelloClientStreamRequest extends Message<HelloClientStreamRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = ''

  constructor(data?: PartialMessage<HelloClientStreamRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'example.v1.HelloClientStreamRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelloClientStreamRequest {
    return new HelloClientStreamRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelloClientStreamRequest {
    return new HelloClientStreamRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelloClientStreamRequest {
    return new HelloClientStreamRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: HelloClientStreamRequest | PlainMessage<HelloClientStreamRequest> | undefined,
    b: HelloClientStreamRequest | PlainMessage<HelloClientStreamRequest> | undefined,
  ): boolean {
    return proto3.util.equals(HelloClientStreamRequest, a, b)
  }
}

/**
 * @generated from message example.v1.HelloClientStreamResponse
 */
export class HelloClientStreamResponse extends Message<HelloClientStreamResponse> {
  /**
   * @generated from field: string greeting = 1;
   */
  greeting = ''

  constructor(data?: PartialMessage<HelloClientStreamResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'example.v1.HelloClientStreamResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'greeting', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelloClientStreamResponse {
    return new HelloClientStreamResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelloClientStreamResponse {
    return new HelloClientStreamResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelloClientStreamResponse {
    return new HelloClientStreamResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: HelloClientStreamResponse | PlainMessage<HelloClientStreamResponse> | undefined,
    b: HelloClientStreamResponse | PlainMessage<HelloClientStreamResponse> | undefined,
  ): boolean {
    return proto3.util.equals(HelloClientStreamResponse, a, b)
  }
}

/**
 * @generated from message example.v1.HelloServerStreamRequest
 */
export class HelloServerStreamRequest extends Message<HelloServerStreamRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = ''

  constructor(data?: PartialMessage<HelloServerStreamRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'example.v1.HelloServerStreamRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelloServerStreamRequest {
    return new HelloServerStreamRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelloServerStreamRequest {
    return new HelloServerStreamRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelloServerStreamRequest {
    return new HelloServerStreamRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: HelloServerStreamRequest | PlainMessage<HelloServerStreamRequest> | undefined,
    b: HelloServerStreamRequest | PlainMessage<HelloServerStreamRequest> | undefined,
  ): boolean {
    return proto3.util.equals(HelloServerStreamRequest, a, b)
  }
}

/**
 * @generated from message example.v1.HelloServerStreamResponse
 */
export class HelloServerStreamResponse extends Message<HelloServerStreamResponse> {
  /**
   * @generated from field: string greeting = 1;
   */
  greeting = ''

  constructor(data?: PartialMessage<HelloServerStreamResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'example.v1.HelloServerStreamResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'greeting', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelloServerStreamResponse {
    return new HelloServerStreamResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelloServerStreamResponse {
    return new HelloServerStreamResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelloServerStreamResponse {
    return new HelloServerStreamResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: HelloServerStreamResponse | PlainMessage<HelloServerStreamResponse> | undefined,
    b: HelloServerStreamResponse | PlainMessage<HelloServerStreamResponse> | undefined,
  ): boolean {
    return proto3.util.equals(HelloServerStreamResponse, a, b)
  }
}

/**
 * @generated from message example.v1.HelloBiDiStreamRequest
 */
export class HelloBiDiStreamRequest extends Message<HelloBiDiStreamRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = ''

  constructor(data?: PartialMessage<HelloBiDiStreamRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'example.v1.HelloBiDiStreamRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelloBiDiStreamRequest {
    return new HelloBiDiStreamRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelloBiDiStreamRequest {
    return new HelloBiDiStreamRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelloBiDiStreamRequest {
    return new HelloBiDiStreamRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: HelloBiDiStreamRequest | PlainMessage<HelloBiDiStreamRequest> | undefined,
    b: HelloBiDiStreamRequest | PlainMessage<HelloBiDiStreamRequest> | undefined,
  ): boolean {
    return proto3.util.equals(HelloBiDiStreamRequest, a, b)
  }
}

/**
 * @generated from message example.v1.HelloBiDiStreamResponse
 */
export class HelloBiDiStreamResponse extends Message<HelloBiDiStreamResponse> {
  /**
   * @generated from field: string greeting = 1;
   */
  greeting = ''

  constructor(data?: PartialMessage<HelloBiDiStreamResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'example.v1.HelloBiDiStreamResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'greeting', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelloBiDiStreamResponse {
    return new HelloBiDiStreamResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelloBiDiStreamResponse {
    return new HelloBiDiStreamResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelloBiDiStreamResponse {
    return new HelloBiDiStreamResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: HelloBiDiStreamResponse | PlainMessage<HelloBiDiStreamResponse> | undefined,
    b: HelloBiDiStreamResponse | PlainMessage<HelloBiDiStreamResponse> | undefined,
  ): boolean {
    return proto3.util.equals(HelloBiDiStreamResponse, a, b)
  }
}
